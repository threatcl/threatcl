name: threatcl release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-linux:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
      - name: Set BUILD_TIME
        run: echo BUILD_TIME=$(date -u +%Y%m%d-%H%M) >> ${GITHUB_ENV}
      - name: Go build
        run: |
          CGO_ENABLED=1 GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }} go build -o threatcl ./cmd/threatcl
          tar -zcvf threatcl-${{ env.BUILD_TIME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz threatcl
      - name: Upload Linux Package
        uses: actions/upload-artifact@v3
        with:
          name: linux-pkg-${{ matrix.goarch }}
          path: threatcl-${{ env.BUILD_TIME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

  build-macos:
    permissions:
      contents: write
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
      - name: Set BUILD_TIME
        run: echo BUILD_TIME=$(date -u +%Y%m%d-%H%M) >> ${GITHUB_ENV}
      - name: Go build
        run: |
          CGO_ENABLED=1 GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }} go build -o threatcl ./cmd/threatcl
          tar -zcvf threatcl-${{ env.BUILD_TIME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz threatcl
      - name: Upload OSX Package
        uses: actions/upload-artifact@v3
        with:
          name: osx-pkg-${{ matrix.goarch }}
          path: threatcl-${{ env.BUILD_TIME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos]
    steps:
      - name: Download linux packages
        uses: actions/download-artifact@v4.1.7
        with:
          name: linux-pkg-amd64
      - name: Download osx arm64
        uses: actions/download-artifact@v4.1.7
        with:
          name: osx-pkg-arm64
      - name: Download osx amd64
        uses: actions/download-artifact@v4.1.7
        with:
          name: osx-pkg-amd64
      - name: Automatic Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          title: "Release"
          files: |
            threatcl*.tar.gz
      - name: Remove artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            linux-pkg-amd64
            osx-pkg-arm64
            osx-pkg-amd64

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
